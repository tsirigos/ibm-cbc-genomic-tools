const char *RSCRIPT_TEMPLATE_HEATMAP = \
"\n##\n## USAGE: genomic_apps.heatmap.r DATA-FILE PARAMETER-FILE OUTPUT-IMAGE-FILE\n##\n\nnorm_rows <- function(X) { for (i in 1:nrow(X)) X[i,] <- (X[i,]-mean(X[i,]))/sd(X[i,]); return(X); }\n\nargs <- commandArgs(trailingOnly=T);\ndata_file <- args[1];\nparam_file <- args[2];\nimage_file <- args[3];\n\nparams <- readLines(param_file);\nshift_upstream <- as.numeric(params[1]);\nshift_downstream <- as.numeric(params[2]);\nheatmap_colors <- strsplit(params[3],',')[[1]];\nheatmap_title <- strsplit(params[4],',')[[1]];\nheatmap_xlab <- params[5];\nheatmap_ylab <- params[6];\nheatmap_size <- as.numeric(strsplit(params[7],',')[[1]]);\nheatmap_resolution <- as.numeric(params[8]);\nn_heatmaps <- as.numeric(params[9]);\n\n\nlibrary('MASS');\nlibrary('preprocessCore');           # from Bioconductor\nlibrary('gplots');                   # from Bioconductor\n\n# load data\nD <- as.matrix(read.table(data_file,row.names=1,sep='\t'));\n  \n# create combined heatmap (main version)\ntiff(image_file,width=heatmap_size[1],height=heatmap_size[2],res=heatmap_resolution,compression='lzw');\n\npar(fig=c(0,1,0,1),mar=c(2,2,0,0)); \nplot.new();\nmtext(heatmap_xlab,side=1);\nmtext(heatmap_ylab,side=2);\n\n\nd <- ncol(D)/n_heatmaps;\nI <- 1:d;\ndj <- 0.9/n_heatmaps;\nfor (j in 1:n_heatmaps) {\n  par(fig=c(0.1+(j-1)*dj,0.1+j*dj,0.1,1),mar=c(0.5,0.5,3,0.5),new=TRUE);\n  colorscale <- c(colorpanel(20,low='white',high='white'),colorpanel(50,low='white',high=heatmap_colors[j]),colorpanel(30,low=heatmap_colors[j],high=heatmap_colors[j]));\n  image(z=t(norm_rows(D[,I])),col=colorscale,main=heatmap_title[j],xlab=heatmap_xlab,ylab=heatmap_ylab,xaxt='n',yaxt='n');\n  I <- I+d;\n}\n\ndev.off();\n\n";

const char *RSCRIPT_TEMPLATE_PEAKDIFF = \
"# source('c:/Aris/Research/Code/genomic_tools/genomic_apps.peakdiff.r');\n\n\n##\n## USAGE: genomic_apps.peakdiff.r DATA-FILE PARAMETER-FILE OUTPUT-IMAGE-FILE\n##\n\n\nmax_abs <- function(a,b) \n{\n  if (abs(a)>abs(b)) a else b\n}\n\nscore_binomial <- function(x,y,n) \n{\n  a <- -pbinom(n*x,n,y,lower.tail=F,log.p=T);\n  b <- pbinom(n*x,n,y,log.p=T);\n  max_abs(a,b)\n}\n\nscore_fold <- function(x,y) \n{\n  return(x/y);\n}\n\nscore <- function(x,y,n,logpval) \n{\n  p <- score_binomial(x,y,n);\n  return(if (abs(p)<logpval) 1.0 else score_fold(x,y));\n}\n\n\ncalc_fdr_cutoff <- function(pos,neg,fdr) \n{\n  kpos <- 1;\n  kneg <- 1;\n  while ((kpos<=length(pos))&(kneg<=length(neg))) {\n    if ((length(neg)-kneg+1)/(length(pos)-kpos+1)<=fdr) { break; }\n    if (pos[kpos]<neg[kneg]) { kpos <- kpos+1; }\n    else if (pos[kpos]>neg[kneg]) { kneg <- kneg+1; }\n    else { kpos <- kpos+1; kneg <- kneg+1; }\n  }\n  if (kpos>length(pos)) { y <- Inf; }\n  else { y <- pos[kpos]; }\n  return(y);\n}\n\n\n\ncalc_diff_peaks.plain <- function(D,signal_cols,ref_cols,control_cols,fdr,win_size,logpval)\n{\n  cat('Filtering data...\n');\n  cat('Computing scores...\n');\n  t_pos <- apply(D,1,function(x) score(mean(x[signal_cols]),mean(x[ref_cols]),win_size,logpval));\n  t_neg <- apply(D,1,function(x) score(mean(x[ref_cols]),mean(x[signal_cols]),win_size,logpval));\n  cat('Computing randomized scores...\n');\n  # make t_control symmetric, remove control_cols (use all)\n  t_control <- apply(D,1,function(x) (score(max(x[control_cols]),min(x[control_cols]),win_size,logpval)+score(min(x[control_cols]),max(x[control_cols]),win_size,logpval))/2);\n  cat('Computing FDR scores...\n');\n  t_pos_cutoff <- as.vector(calc_fdr_cutoff(sort(t_pos),sort(t_control),fdr));\n  t_neg_cutoff <- as.vector(calc_fdr_cutoff(sort(t_neg),sort(t_control),fdr));\n  t_pos_score <- cbind(t_pos,D)[(t_pos>=t_pos_cutoff),];\n  t_neg_score <- -cbind(t_neg,D)[(t_neg>=t_neg_cutoff),];\n  cat('significant entries (over) = '); cat(nrow(t_pos_score)); cat('\n');\n  cat('significant entries (under) = '); cat(nrow(t_neg_score)); cat('\n');\n  out <- list(D=D,signal_cols=signal_cols,ref_cols=ref_cols,control_cols=control_cols,fdr=fdr,t_pos=t_pos,t_neg=t_neg,t_control=t_control,t_pos_cutoff=t_pos_cutoff,t_neg_cutoff=t_neg_cutoff,t_pos_score=t_pos_score,t_neg_score=t_neg_score);\n  calc_diff_peaks.plain.plot(out);\n  return(out);\n}\n\n\ncalc_diff_peaks.plain.plot <- function(out)\n{\n  x_label <- colnames(out$D)[out$ref_cols[1]];\n  y_label <- colnames(out$D)[out$signal_cols[1]];\n  x <- apply(out$D[,ref_cols],1,mean);\n  y <- apply(out$D[,signal_cols],1,mean);\n  smoothScatter(log(x),log(y),xlab=paste(x_label,' mean (log)',sep=''),ylab=paste(y_label,' mean (log)',sep=''),main='step 2: differential peak detection');\n  pos_i <- out$t_pos>=out$t_pos_cutoff;\n  points(log(x[pos_i]),log(y[pos_i]),pch=19,col='red');\n  neg_i <- out$t_neg>=out$t_neg_cutoff;\n  points(log(x[neg_i]),log(y[neg_i]),pch=19,col='green');\n}\n\n\n\n\ncalc_fdr_cutoffs <- function(val,t,t_control,fdr,bin_w) \n{\n  t_score <- seq(0,0,length.out=length(t));\n  bin_s <- bin_w/2;\n  I <- order(val);\n  i <- bin_w;\n  y <- c();\n  while (i <= length(val)) {\n    a <- I[(i-bin_w+1):i];\n    y0 <- calc_fdr_cutoff(sort(t[a]),sort(t_control[a]),fdr);\n    t_score[a] <- apply(cbind(t_score[a],t[a]/y0),1,max);\n    y <- c(y,y0);\n    i <- i + bin_s;\n  }\n  return(list(t_cutoff=y,t_score=t_score));\n}\n\n\ncalc_diff_peaks.advanced <- function(D,signal_cols,ref_cols,control_cols,fdr,bin_w)        \n{\n  win_size <- 500;\n  pseudo <- 1;\n  t <- apply(D,1,function(x) score(max(x[signal_cols]),min(x[ref_cols]),win_size,pseudo));              # REPLACE score_fold() with average_score_fold()\n  t_control <- apply(D,1,function(x) score(max(x[control_cols]),min(x[control_cols]),win_size,pseudo));\n  out <- calc_fdr_cutoffs(D[,ref_cols[1]],t,t_control,fdr,bin_w);\n  t_cutoff <- out$t_cutoff;\n  t_score <- out$t_score;\n  x <- sort(D[,ref_cols[1]])[seq(bin_w/2,length(t)-bin_w/2,length.out=length(t_cutoff))];\n  z_pos <- t_cutoff;\n  for (i in 1:length(z_pos)) z_pos[i] <- t_cutoff[i]*x[i];\n  z_neg <- t_cutoff;\n  for (i in 1:length(z_neg)) z_neg[i] <- (1/t_cutoff[i])*x[i];\n  \n  return(list(D=D,signal_cols=signal_cols,ref_cols=ref_cols,control_cols=control_cols,t=t,t_control=t_control,t_cutoff=t_cutoff,t_score=t_score,x=x,z_pos=z_pos,z_neg=z_neg));\n}\n\n\ncalc_diff_peaks.advanced.plot <- function(out,x_label,y_label)\n{\n  layout(matrix(1:4,ncol=2,byrow=TRUE));\n  X <- log(out$D[,out$ref_cols[1]]);\n  Y <- log(out$D[,out$signal_cols[1]]);\n  smoothScatter(log(out$D[,out$control_cols]),xlab=paste(x_label,' replicate #1 (log)',sep=''),ylab=paste(x_label,' replicate #2 (log)',sep=''));\n  smoothScatter(X,Y,xlab=paste(x_label,' replicate #1 (log)',sep=''),ylab=paste(y_label,' replicate #1 (log)',sep=''));\n  #points(X[select_genes],Y[select_genes],pch=24,bg='magenta');\n  lines(log(out$x),log(out$z_pos),col='red');\n  lines(log(out$x),log(out$z_neg),col='blue');\n}\n\n\n\nremove_outliers <- function(D,signal_cols,ref_cols,outlier_percentile)\n{\n  cat('Fitting linear model...\n');\n  signal_fit <- lm(log(D[,signal_cols[2]]) ~ log(D[,signal_cols[1]]));\n  signal_r <- abs(resid(signal_fit));\n  signal_i <- signal_r<=as.numeric(quantile(signal_r,1.0-outlier_percentile));\n  ref_fit <- lm(log(D[,ref_cols[2]]) ~ log(D[,ref_cols[1]]));\n  ref_r <- abs(resid(ref_fit));\n  ref_i <- ref_r<=as.numeric(quantile(ref_r,1.0-outlier_percentile));\n  signal_z <- log(D[,signal_cols[c(1,2)]]);\n  signal_label <- colnames(D)[signal_cols[1]];\n  smoothScatter(signal_z,xlab=paste(signal_label,' replicate #1 (log)',sep=''),ylab=paste(signal_label,' replicate #2 (log)',sep=''),main='step 1: outlier detection');\n  points(signal_z[!signal_i,],pch=19,col='brown');\n  abline(signal_fit,col='green');\n  #lines(lowess(signal_z),col='magenta');\n  ref_z <- log(D[,ref_cols[c(1,2)]]);\n  ref_label <- colnames(D)[ref_cols[1]];\n  smoothScatter(ref_z,xlab=paste(ref_label,' replicate #1 (log)',sep=''),ylab=paste(ref_label,' replicate #2 (log)',sep=''),main='step 1: outlier detection');\n  points(ref_z[!ref_i,],pch=19,col='brown');\n  abline(ref_fit,col='green');\n  #lines(lowess(ref_z),col='magenta');\n  return(D[signal_i&ref_i,]);\n}\n\n\nnormalize_matrix <- function(D)\n{\n  D_norm <- normalize.quantiles(D);\n  dimnames(D_norm) <- dimnames(D);\n  return(D_norm);\n}\n\n\n\n\n\n\n#\n# MAIN PROGRAM\n#\n\n\nlibrary('preprocessCore');\nlibrary('MASS');\n\nargs <- commandArgs(trailingOnly=T);\ndata_file <- args[1];\nparam_file <- args[2];\nimage_file <- args[3];\n\nparams <- readLines(param_file);\nn_signal_cols <- as.numeric(params[1]);\nn_ref_cols <- as.numeric(params[2]);\nwin_size <- as.numeric(params[3]);\nlogpval <- log(as.numeric(params[4]));\noutlier_percentile <- as.numeric(params[5]);\nfdr <- as.numeric(params[6]);\nsample_labels <- strsplit(params[7],',')[[1]];\nimage_size <- as.numeric(strsplit(params[8],',')[[1]]);\nimage_resolution <- as.numeric(params[9]);\n\n\npseudo <- 1;		# add minimum possible pseudocount to avoid division by zero in fold-change computation\n\n\ncat('Reading input matrix...\n');\nDATA <- (as.matrix(read.table(data_file,row.names=1,sep='\t'))+pseudo)/(win_size+pseudo);\nsignal_cols <- 1:n_signal_cols;\nref_cols <- n_signal_cols+1:n_ref_cols;\ncontrol_cols <- signal_cols;\ndimnames(DATA)[[2]][signal_cols] = sample_labels[1];\ndimnames(DATA)[[2]][ref_cols] = sample_labels[2];\n\n\n# compute diff peaks\ntiff(image_file,width=image_size[1],height=image_size[2],res=image_resolution,compression='lzw');\nlayout(matrix(1:4,ncol=2,byrow=TRUE));\n#D <- normalize_matrix(remove_outliers(DATA,signal_cols,ref_cols,outlier_percentile));\nD <- remove_outliers(normalize_matrix(DATA),signal_cols,ref_cols,outlier_percentile);\nout <- calc_diff_peaks.plain(D,signal_cols,ref_cols,control_cols,fdr,win_size,logpval); \ndev.off();\nout_file <- paste(data_file,'.FDR=',fdr_,'%.score',sep='');\ncat('output file = '); cat(out_file); cat('\n');\nwrite.table(format(rbind(out$t_pos_score,out$t_neg_score),digits=4),out_file,quote=F,col.names=F,sep='\t');\n\n\n\ncat('Done.\n');\ncat('*********************************************************************\n');\n\n\n";

const char *RSCRIPT_TEMPLATE_PROFILE = \
"\n##\n## USAGE: genomic_apps.profile.r DATA-FILE PARAMETER-FILE OUTPUT-IMAGE-FILE\n##\n\nargs <- commandArgs(trailingOnly=T);\nprofile_data_file <- args[1];\nprofile_param_file <- args[2];\nprofile_image_file <- args[3];\n\nparams <- readLines(profile_param_file);\nprofile_upstream <- as.numeric(params[1]);\nprofile_downstream <- as.numeric(params[2]);\nprofile_legend <- strsplit(params[3],',')[[1]];\nprofile_colors <- strsplit(params[4],',')[[1]];\nprofile_title <- params[5];\nprofile_xlab <- params[6];\nprofile_ylab <- params[7];\n  \ntiff(profile_image_file,width=3500,height=3500,res=600,compression='lzw',antialias='none');\nY <- as.matrix(read.table(profile_data_file,header=FALSE,row.names=1,sep='\t'));\n\nd <- (profile_upstream+profile_downstream)/ncol(Y);\nx <- seq(-profile_upstream+d/2,+profile_downstream-d/2,d);\nplot(x,Y[1,],type='l',col=profile_colors[1],main=profile_title,xlab=profile_xlab,ylab=profile_ylab,xlim=c(-profile_upstream,profile_upstream),ylim=c(0,max(Y)));\ni <- 2;\nwhile (i <= nrow(Y)) \n{\n  lines(x,Y[i,],col=profile_colors[i]);\n  i <- i + 1;\n}\nlegend('topright',profile_legend,pch=16,col=profile_colors,inset=0.05);\ndev.off();\n\n  \n  \n\n\n";

